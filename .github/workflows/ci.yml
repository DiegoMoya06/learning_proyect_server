name: Java CI/CD with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  LC_DB_USERNAME: ${{ secrets.LC_DB_USERNAME }}
  LC_DB_PASSWORD: ${{ secrets.LC_DB_PASSWORD }}
  LC_DB_SCHEMA: ${{ secrets.LC_DB_SCHEMA }}
  LC_DB_ROOT_PASSWORD: ${{ secrets.LC_DB_ROOT_PASSWORD }}
  LC_DB_PORT: ${{ secrets.LC_DB_PORT }}

  LC_CG_CHAT_API_URL: ${{ secrets.LC_CG_CHAT_API_URL }}
  LC_CG_FILE_API_URL: ${{ secrets.LC_CG_FILE_API_URL }}
  LC_C_API_KEY: ${{ secrets.LC_C_API_KEY }}

  LC_DS_CHAT_API_URL: ${{ secrets.LC_DS_CHAT_API_URL }}
  LC_DS_API_KEY: ${{ secrets.LC_DS_API_KEY }}

jobs:
  build_job:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.LC_DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.LC_DB_SCHEMA }}
          MYSQL_USER: ${{ env.LC_DB_USERNAME }}
          MYSQL_PASSWORD: ${{ env.LC_DB_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uuser -ppassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and Run Tests
        run: mvn clean verify


  deploy_job:
    name: Deploy backend to aws
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.LC_DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.LC_DB_SCHEMA }}
          MYSQL_USER: ${{ env.LC_DB_USERNAME }}
          MYSQL_PASSWORD: ${{ env.LC_DB_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uuser -ppassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

#    if: github.event_name == 'push'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY_URL: ${{ secrets.ECR_REPOSITORY_URL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and Test Spring Boot
        run: |
          mvn clean install

      - name: Login to AWS ECR
        run: |
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.AWS_REGION }}
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URL }}

      - name: Build and Push Docker Image
        run: |
          docker build -t learning_cards_service .
          docker tag learning_cards_service:latest ${{ env.ECR_REPOSITORY_URL }}:latest
          docker push ${{ env.ECR_REPOSITORY_URL }}:latest

      - name: Deploy to AWS ECS
        run: |
          aws ecs update-service --cluster lc-cluster --service lc-service --force-new-deployment